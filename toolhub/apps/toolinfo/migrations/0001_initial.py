# Generated by Django 2.2.16 on 2020-11-06 00:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique identifier for this tool. Must be unique for every tool. It is recommended you prefix your tool names to reduce the risk of clashes.', max_length=255, unique=True)),
                ('title', models.CharField(help_text='Human readable tool name. Recommended limit of 25 characters.', max_length=255)),
                ('description', models.TextField(help_text='A longer description of the tool. The recommended length for a description is 3-5 sentences.', max_length=65535)),
                ('url', models.CharField(help_text='A direct link to the tool or to instructions on how to use or install the tool.', max_length=2047)),
                ('keywords', models.CharField(blank=True, max_length=2047, null=True)),
                ('author', models.CharField(blank=True, help_text='The primary tool developer.', max_length=255, null=True)),
                ('repository', models.CharField(blank=True, help_text='A link to the repository where the tool code is hosted.', max_length=2047, null=True)),
                ('subtitle', models.CharField(blank=True, help_text='Longer than the full title but shorter than the description. It should add some additional context to the title.', max_length=255, null=True)),
                ('openhub_id', models.CharField(blank=True, help_text='The project ID on OpenHub. Given a URL of https://openhub.net/p/foo, the project ID is `foo`.', max_length=255, null=True)),
                ('url_alternates', jsonfield.fields.JSONField(blank=True, default=list, help_text='Alternate links to the tool or install documentation in different natural languages.', null=True)),
                ('bot_username', models.CharField(blank=True, help_text="If the tool is a bot, the Wikimedia username of the bot. Do not include 'User:' or similar prefixes.", max_length=255, null=True)),
                ('deprecated', models.BooleanField(default=False, help_text='If true, the use of this tool is officially discouraged. The `replaced_by` parameter can be used to define a replacement.')),
                ('replaced_by', models.TextField(blank=True, help_text='If this tool is deprecated, this parameter should be used to link to the replacement tool.', max_length=2047, null=True)),
                ('experimental', models.BooleanField(default=False, help_text='If true, this tool is unstable and can change or go offline at any time.')),
                ('for_wikis', jsonfield.fields.JSONField(blank=True, default=list, help_text="A string or array of strings describing the wiki(s) this tool can be used on. Use hostnames such as `zh.wiktionary.org`. Use asterisks as wildcards. For example, `*.wikisource.org` means 'this tool works on all Wikisource wikis.' `*` means 'this works on all wikis, including Wikimedia wikis.'", null=True)),
                ('icon', models.CharField(blank=True, help_text='A link to a Wikimedia Commons file description page for an icon that depicts the tool.', max_length=2047, null=True, validators=[django.core.validators.RegexValidator(regex='^https://commons.wikimedia.org/wiki/File:.+\\\\..+$')])),
                ('license', models.CharField(blank=True, help_text="The software license the tool code is available under. Use a standard SPDX license identifier like 'GPL-3.0-or-later'.", max_length=255, null=True)),
                ('sponsor', jsonfield.fields.JSONField(blank=True, default=list, help_text="Organization(s) that sponsored the tool's development.", null=True)),
                ('available_ui_languages', jsonfield.fields.JSONField(blank=True, default=list, help_text="The language(s) the tool's interface has been translated into. Use ISO 639 language codes like `zh` and `scn`. If not defined it is assumed the tool is only available in English.", null=True)),
                ('technology_used', jsonfield.fields.JSONField(blank=True, default=list, help_text='A string or array of strings listing technologies (programming languages, development frameworks, etc.) used in creating the tool.', null=True)),
                ('tool_type', models.CharField(blank=True, choices=[('web app', 'web app'), ('desktop app', 'desktop app'), ('bot', 'bot'), ('gadget', 'gadget'), ('user script', 'user script'), ('command line tool', 'command line tool'), ('coding framework', 'coding framework'), ('other', 'other')], help_text='The manner in which the tool is used. Select one from the list of options.', max_length=32, null=True)),
                ('api_url', models.TextField(blank=True, help_text="A link to the tool's API, if available.", max_length=2047, null=True)),
                ('developer_docs_url', jsonfield.fields.JSONField(blank=True, default=list, help_text="A link to the tool's developer documentation, if available.", null=True)),
                ('user_docs_url', jsonfield.fields.JSONField(blank=True, default=list, help_text="A link to the tool's user documentation, if available.", null=True)),
                ('feedback_url', jsonfield.fields.JSONField(blank=True, default=list, help_text="A link to location where the tool's user can leave feedback.", null=True)),
                ('privacy_policy_url', jsonfield.fields.JSONField(blank=True, default=list, help_text="A link to the tool's privacy policy, if available.", null=True)),
                ('translate_url', models.TextField(blank=True, help_text="A link to the tool's translation interface.", max_length=2047, null=True)),
                ('bugtracker_url', models.TextField(blank=True, help_text="A link to the tool's bug tracker on GitHub, Bitbucket, Phabricator, etc.", max_length=2047, null=True)),
                ('_schema', models.CharField(blank=True, help_text='A URI identifying the jsonschema for this toolinfo.json record. This should be a short uri containing only the name and revision at the end of the URI path.', max_length=32, null=True)),
                ('_language', models.CharField(blank=True, help_text='The language this toolinfo record is written if, if not the default value of English. Use ISO 639 language codes.', max_length=16, null=True, validators=[django.core.validators.RegexValidator(regex='^(x-.*|[A-Za-z]{2,3}(-.*)?)$')])),
                ('created_date', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, editable=False)),
                ('modified_date', models.DateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, editable=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tools', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
