# Generated by Django 2.2.17 on 2021-06-22 22:26

from django.contrib.auth.models import Group
from django.contrib.contenttypes.models import ContentType
from django.db import migrations

from reversion.models import Version

from toolhub.apps.auditlog.models import LogEntry
from toolhub.apps.toolinfo.models import Tool


def backfill_tool_params(apps, schema_editor):
    """Backfill `params` for existing Tool LogEntry objects."""
    ct = ContentType.objects.get_for_model(Tool).pk
    qs = LogEntry.objects.filter(content_type=ct)
    for log in qs:
        if log.params:
            # Ignore logs that already have params data
            continue
        tool = log.get_target()
        vqs = Version.objects.select_related("revision")
        vqs = vqs.get_for_object(tool)
        vqs = vqs.filter(revision__date_created__lte=log.timestamp)
        vqs = vqs.order_by("-revision__date_created")
        ver = vqs.first()
        if ver:
            log.params["revision"] = ver.id
            log.save(update_fields=["params"])


def backfill_group_params(apps, schema_editor):
    """Backfill `params` for existing Group LogEntry objects."""
    # Move user with group change from actor to params
    ct = ContentType.objects.get_for_model(Group).pk
    qs = LogEntry.objects.filter(content_type=ct)
    for log in qs:
        if log.params:
            # Ignore logs that already have params data
            continue
        log.params["user"] = {
            "id": log.user.pk,
            "username": log.user.username,
        }
        # Pretend the rights change was done by "System" because we don't know
        # who really did it. This is why we are fixing this stuff! :)
        log.user = None
        log.save(update_fields=["user", "params"])


def backfill_version_params(apps, schema_editor):
    """Backfill `params` for existing Version LogEntry objects."""
    ct = ContentType.objects.get_for_model(Version).pk
    qs = LogEntry.objects.filter(content_type=ct)
    for log in qs:
        if log.params:
            # Ignore logs that already have params data
            continue
        ver = log.get_target()
        log.params["tool_name"] = ver.field_dict["name"]
        log.save(update_fields=["params"])


class Migration(migrations.Migration):

    dependencies = [
        ('auditlog', '0005_add_params'),
    ]

    operations = [
        migrations.RunPython(backfill_tool_params, migrations.RunPython.noop),
        migrations.RunPython(backfill_group_params, migrations.RunPython.noop),
        migrations.RunPython(backfill_version_params, migrations.RunPython.noop),
    ]
